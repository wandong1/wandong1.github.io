<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>redis on 万东的云计算运维博客</title>
    <link>https://wandong.notewan.com/tags/redis/</link>
    <description>Recent content in redis on 万东的云计算运维博客</description>
    <image>
      <url>https://wandong.notewan.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://wandong.notewan.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 15 Sep 2022 08:15:16 +0000</lastBuildDate><atom:link href="https://wandong.notewan.com/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>redis的常见问题</title>
      <link>https://wandong.notewan.com/post/redis%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 15 Sep 2022 08:15:16 +0000</pubDate>
      
      <guid>https://wandong.notewan.com/post/redis%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>1、缓存击穿，某些场景下，大量的key同时失效，请求直接穿过redis缓存层打到数据库上。 解决方法：对key的失效时间设置随机值避免同时失效。
2、缓存穿透，请求进来请求本就不存在的数据，redis层找不到数据库也找不到，每个这种请求都会打到数据库造成压力。 解决方法：对请求的后端数据库不存在的数据，设置空缓存，避免恶意请求对后端数据库造成压力。
3、雪崩，指流量进来打到redis，redis由于某些原因扛不住，流量又会打到数据库，数据库很显然更抗不住。造成系统雪崩。 解决方法：redis采用高可用的集群架构，针对某些bigkey进行打散操作。
4、redis常见数据类型。 string，hash，list，set ，有序set。
5、Redis有哪些适合的场景? (1)Session共享(单点登录);(2)页面缓存;(3)队列;(4)排行榜/计数器;(5)发布/订阅;
(1)LUA脚本：在事务的基础上，假如，需要在服务端一次性的执行更复杂的操作，那么，这个时候lua就可以上场了。</description>
    </item>
    
    <item>
      <title>redis工具之redis_rdb_tools</title>
      <link>https://wandong.notewan.com/post/redis%E5%B7%A5%E5%85%B7%E4%B9%8Bredis_rdb_tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wandong.notewan.com/post/redis%E5%B7%A5%E5%85%B7%E4%B9%8Bredis_rdb_tools/</guid>
      <description>安装工具 指定pip源安装
pip install rdbtools -i https://mirrors.aliyun.com/pypi/simple/ pip install python-lzf -i https://mirrors.aliyun.com/pypi/simple/ 生成内存报告 rdb -c memory dump.rdb &amp;gt; redis_memory_report.csv
详细参考：https://www.cnblogs.com/xingxia/p/redis_rdb_tools.html</description>
    </item>
    
    <item>
      <title>redis抓包分析</title>
      <link>https://wandong.notewan.com/post/redis%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wandong.notewan.com/post/redis%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90/</guid>
      <description>tcpdump -i bond0 tcp and port 3029 and host 10.42.23.141 -n -nn -vvv -w redis2.cap data and tcp.dstport == 3034
import dpkt import socket from openpyxl import Workbook def analysis_of_redis_cap(cap_file,redis_port): wb = Workbook() ws = wb.active table_hed = [&amp;#39;源地址&amp;#39;,&amp;#39;目的地址&amp;#39;,&amp;#39;redis请求命令&amp;#39;] ws.append(table_hed) with open(cap_file,&amp;#39;rb&amp;#39;) as f: string_data = dpkt.pcap.Reader(f) for ts, buf in string_data: eth = dpkt.ethernet.Ethernet(buf) ip = eth.data tcp = ip.data # print(tcp.dport) if tcp.dport == int(redis_port): try: data_pre = tcp.</description>
    </item>
    
  </channel>
</rss>
