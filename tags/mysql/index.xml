<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>mysql on 万东的云计算运维博客</title>
    <link>https://wandong1.github.io/tags/mysql/</link>
    <description>Recent content in mysql on 万东的云计算运维博客</description>
    <image>
      <url>https://wandong1.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://wandong1.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://wandong1.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Explain详解与索引最佳实践</title>
      <link>https://wandong1.github.io/post/explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wandong1.github.io/post/explain%E8%AF%A6%E8%A7%A3%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>Explain工具介绍 使用EXPLAIN关键字可以模拟优化器执行SQL语句，分析你的查询语句或是结构的性能瓶颈
在 select 语句之前增加 explain 关键字，MySQL 会在查询上设置一个标记，执行查询会返回执行计划的信息，而不是执行这条SQL
注意：如果 from 中包含子查询，仍会执行该子查询，将结果放入临时表中
Explain分析示例 参考官方文档：https://dev.mysql.com/doc/refman/5.7/en/explain-output.html
示例表： DROP TABLE IF EXISTS `actor`; CREATE TABLE `actor` ( `id` int(11) NOT NULL, `name` varchar(45) DEFAULT NULL, `update_time` datetime DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; INSERT INTO `actor` (`id`, `name`, `update_time`) VALUES (1,&amp;#39;a&amp;#39;,&amp;#39;2017-12-22 15:27:18&amp;#39;), (2,&amp;#39;b&amp;#39;,&amp;#39;2017-12-22 15:27:18&amp;#39;), (3,&amp;#39;c&amp;#39;,&amp;#39;2017-12-22 15:27:18&amp;#39;); DROP TABLE IF EXISTS `film`; CREATE TABLE `film` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(10) DEFAULT NULL, PRIMARY KEY (`id`), KEY `idx_name` (`name`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; INSERT INTO `film` (`id`, `name`) VALUES (3,&amp;#39;film0&amp;#39;),(1,&amp;#39;film1&amp;#39;),(2,&amp;#39;film2&amp;#39;); DROP TABLE IF EXISTS `film_actor`; CREATE TABLE `film_actor` ( `id` int(11) NOT NULL, `film_id` int(11) NOT NULL, `actor_id` int(11) NOT NULL, `remark` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`), KEY `idx_film_actor_id` (`film_id`,`actor_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; INSERT INTO `film_actor` (`id`, `film_id`, `actor_id`) VALUES (1,1,1),(2,1,2),(3,2,1); mysql&amp;gt; explain select * from actor; 在查询中的每个表会输出一行，如果有两个表通过 join 连接查询，那么会输出两行</description>
    </item>
    
    <item>
      <title>mysql安装文档</title>
      <link>https://wandong1.github.io/post/mysql%E5%AE%89%E8%A3%85%E6%96%87%E6%A1%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wandong1.github.io/post/mysql%E5%AE%89%E8%A3%85%E6%96%87%E6%A1%A3/</guid>
      <description>mysql5.7的安装与配置(centos7环境) 第一步：下载mysql
wget http://mirrors.sohu.com/mysql/MySQL-5.7/mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz 第二步：解压文件
tar -zxvf mysql-5.7.17-linux-glibc2.5-x86_64.tar.gz -C /usr/local/ mv mysql-5.7.17-linux-glibc2.5-x86_64/ mysql 第三步：配置启动文件 然后去到mysql的support-files目录下,复制my.cnf到 /etc/my.cnf(mysqld启动时自动读取)
cd mysql/support-files/ cp my-default.cnf /etc/my.cnf 注意：如果你在安装时Linux虚拟机时同时安装了默认的mysql，此时操作以上步骤，终端将会提示你文件已存在是否覆盖，输入yes覆盖即可。 2、配置数据库编码
vim /etc/my.cnf # 添加以下内容: [mysql] default-character-set=utf8 [mysqld] default-storage-engine=INNODB character_set_server=utf8 3、复制mysql.server到/etc/init.d/目录下(目的想实现开机自动执行效果)
cp mysql.server /etc/init.d/mysql 4、修改/etc/init.d/mysql参数
vim /etc/init.d/mysql # 修改以下内容: basedir=/usr/local/mysql datadir=/usr/local/mysql/data 5、出于安全便利，创建一个操作数据库的专门用户 建立一个mysql的组:
5、出于安全便利，创建一个操作数据库的专门用户 建立一个mysql的组:
groupadd mysql #建立mysql用户，并且把用户放到mysql组: useradd -r -g mysql mysql #给mysql用户设置一个密码: passwd mysql #给目录/usr/local/mysql 更改拥有者: chown -R mysql:mysql /usr/local/mysql/ 第四步：初始化 mysql 的数据库
cd /usr/local/mysql/bin/ ./mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data # 初始化后会生成一个临时密码 root@localhost:：*(最好先记录这个临时密码) # 2.</description>
    </item>
    
    <item>
      <title>深入理解Mysql索引底层数据结构与算法</title>
      <link>https://wandong1.github.io/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3mysql%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wandong1.github.io/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3mysql%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</guid>
      <description>索引的本质 索引是帮助MySQL高效获取数据的排好序的数据结构
索引数据结构 •二叉树
•红黑树
•Hash表
•B-Tree
B-Tree 结构 •叶节点具有相同的深度，叶节点的指针为空
•所有索引元素不重复
•节点中的数据索引从左到右递增排列
B+Tree结构 •非叶子节点不存储data，只存储索引(冗余)，可以放更多的索引
•叶子节点包含所有索引字段
•叶子节点用指针连接，提高区间访问的性能
hash结构 •对索引的key进行一次hash计算就可以定位出数据存储的位置
•很多时候Hash索引要比B+ 树索引更高效
•仅能满足 “=”，“IN”，不支持范围查询
•hash冲突问题
MyISAM存储引擎索引实现 •MyISAM索引文件和数据文件是分离的(非聚集), 索引树只存对应数据的磁盘文件地址，myisam数据文件分为三种，表结构，数据，索引
InnoDB存储引擎索引实现 •InnoDB索引实现(聚集)
•表数据文件本身就是按B+Tree组织的一个索引结构文件
•聚集索引-叶节点包含了完整的数据记录
•为什么建议InnoDB表必须建主键，并且推荐使用整型的自增主键？
•为什么非主键索引结构叶子节点存储的是主键值？(一致性和节省存储空间)
索引最左前缀原理 •联合索引的底层存储结构长什么样？</description>
    </item>
    
  </channel>
</rss>
